import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import 'package:thuchicanhan/core/data_manager.dart';

class TransactionListPage extends StatefulWidget {
  // Nh·∫≠n danh s√°ch giao d·ªãch hi·ªán t·∫°i t·ª´ MainScreen
  final List<Transaction> transactions;
  // Callback ƒë·ªÉ th√¥ng b√°o cho MainScreen c·∫≠p nh·∫≠t l·∫°i danh s√°ch g·ªëc
  final Function(List<Transaction>) onUpdateTransactions;

  const TransactionListPage({
    super.key,
    required this.transactions,
    required this.onUpdateTransactions,
  });

  @override
  State<TransactionListPage> createState() => _TransactionListPageState();
}

class _TransactionListPageState extends State<TransactionListPage> {
  // B·∫£n sao c·ª•c b·ªô (d√πng t·∫°m th·ªùi)
  late List<Transaction> _currentTransactions;

  @override
  void initState() {
    super.initState();
    // Kh·ªüi t·∫°o b·∫£n sao t·ª´ d·ªØ li·ªáu truy·ªÅn v√†o
    _currentTransactions = List.from(widget.transactions);
  }

  // C·∫≠p nh·∫≠t l·∫°i khi widget.transactions thay ƒë·ªïi (v√≠ d·ª•: khi th√™m giao d·ªãch m·ªõi)
  @override
  void didUpdateWidget(covariant TransactionListPage oldWidget) {
    super.didUpdateWidget(oldWidget);
    // N·∫øu d·ªØ li·ªáu g·ªëc thay ƒë·ªïi (do th√™m/s·ª≠a/x√≥a t·ª´ MainScreen ho·∫∑c m√†n h√¨nh kh√°c), c·∫≠p nh·∫≠t b·∫£n sao c·ª•c b·ªô
    if (widget.transactions != oldWidget.transactions) {
      _currentTransactions = List.from(widget.transactions);
    }
  }


  // C√°c ph∆∞∆°ng th·ª©c qu·∫£n l√Ω d·ªØ li·ªáu

  void _deleteTransaction(Transaction transactionToDelete) async {
    // X√≥a kh·ªèi b·∫£n sao c·ª•c b·ªô
    _currentTransactions.remove(transactionToDelete);
    // G·ª≠i danh s√°ch ƒë√£ c·∫≠p nh·∫≠t l√™n MainScreen
    widget.onUpdateTransactions(_currentTransactions);
    SampleData.allTransactions.remove(transactionToDelete);

    try {
      await saveTransactionsToJsonFile(
        SampleData.allTransactions,
        'data.json',
      );
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ƒê√£ x√≥a giao d·ªãch th√†nh c√¥ng')),
      );
    } catch (e) {
      print('L·ªói khi l∆∞u d·ªØ li·ªáu JSON: $e');
      // KI·ªÇM TRA mounted TR∆Ø·ªöC KHI T∆Ø∆†NG T√ÅC V·ªöI CONTEXT/UI
      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('L·ªói: Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu!')),
      );
    }
  }

  void _editTransaction(Transaction oldTransaction, Transaction newTransaction) async {
    // T√¨m v√† c·∫≠p nh·∫≠t object trong b·∫£n sao c·ª•c b·ªô
    final index = _currentTransactions.indexOf(oldTransaction);
    if (index != -1) {
      _currentTransactions[index] = newTransaction;
    }
    // G·ª≠i danh s√°ch ƒë√£ c·∫≠p nh·∫≠t l√™n MainScreen
    widget.onUpdateTransactions(_currentTransactions);
    SampleData.allTransactions[index] = newTransaction;

    try {
      await saveTransactionsToJsonFile(
        SampleData.allTransactions,
        'data.json',
      );
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ƒê√£ c·∫≠p nh·∫≠t giao d·ªãch: ${newTransaction.name}')),
      );
    } catch (e) {
      print('L·ªói khi l∆∞u d·ªØ li·ªáu JSON: $e');
      // KI·ªÇM TRA mounted TR∆Ø·ªöC KHI T∆Ø∆†NG T√ÅC V·ªöI CONTEXT/UI
      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('L·ªói: Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu!')),
      );
    }
  }

  // Widget giao di·ªán

  @override
  Widget build(BuildContext context) {
    // L·ªçc d·ªØ li·ªáu t·ª´ _currentTransactions cho t·ª´ng tab
    final incomeTransactions =
    _currentTransactions.where((t) => t.type == TransactionType.income).toList();
    final expenseTransactions =
    _currentTransactions.where((t) => t.type == TransactionType.expense).toList();

    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Danh s√°ch Thu Chi'),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'üí∞ Thu nh·∫≠p'),
              Tab(text: 'üí∏ Chi ti√™u'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            // Tab Thu nh·∫≠p
            TransactionListView(
              transactions: incomeTransactions,
              onDelete: _deleteTransaction,
              onEdit: _editTransaction,
            ),
            // Tab Chi ti√™u
            TransactionListView(
              transactions: expenseTransactions,
              onDelete: _deleteTransaction,
              onEdit: _editTransaction,
            ),
          ],
        ),
      ),
    );
  }
}

// Widget hi·ªÉn th·ªã danh s√°ch giao d·ªãch

class TransactionListView extends StatelessWidget {
  final List<Transaction> transactions;
  final Function(Transaction) onDelete;
  final Function(Transaction, Transaction) onEdit;

  const TransactionListView({
    super.key,
    required this.transactions,
    required this.onDelete,
    required this.onEdit,
  });

  @override
  Widget build(BuildContext context) {
    if (transactions.isEmpty) {
      return const Center(
          child: Text('Kh√¥ng c√≥ giao d·ªãch n√†o trong danh m·ª•c n√†y.'));
    }

    // S·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t l√™n tr∆∞·ªõc
    transactions.sort((a, b) => b.date.compareTo(a.date));

    return ListView.builder(
      itemCount: transactions.length,
      itemBuilder: (context, index) {
        final transaction = transactions[index];
        return TransactionListItem(
          key: ObjectKey(transaction),
          transaction: transaction,
          onDelete: onDelete,
          onEdit: onEdit,
        );
      },
    );
  }
}

// Widget hi·ªÉn th·ªã t·ª´ng m·ª•c giao d·ªãch

class TransactionListItem extends StatelessWidget {
  final Transaction transaction;
  final Function(Transaction) onDelete;
  final Function(Transaction, Transaction) onEdit;

  const TransactionListItem({
    super.key,
    required this.transaction,
    required this.onDelete,
    required this.onEdit,
  });

  // Hi·ªÉn th·ªã dialog ch·ªânh s·ª≠a
  void _showEditDialog(BuildContext context) {
    // T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi tr·ª±c ti·∫øp
    Transaction tempTransaction = transaction.copyWith();

    final nameController = TextEditingController(text: tempTransaction.name);
    final amountController =
    TextEditingController(text: tempTransaction.amount.toString());

    // Danh m·ª•c d·ª±a tr√™n lo·∫°i giao d·ªãch
    final List<String> categories = tempTransaction.type == TransactionType.income
        ? ['L∆∞∆°ng', 'Ngu·ªìn thu nh·∫≠p kh√°c']
        : ['Nh√† c·ª≠a', 'ƒÇn u·ªëng', 'Gi·∫£i tr√≠', 'ƒêi l·∫°i', 'Kh√°c'];

    showDialog(
      context: context,
      builder: (ctx) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text('Ch·ªânh s·ª≠a ${tempTransaction.type == TransactionType.income ? 'Thu nh·∫≠p' : 'Chi ti√™u'}'),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: nameController,
                      decoration: const InputDecoration(labelText: 'T√™n thu chi'),
                    ),
                    const SizedBox(height: 10),
                    // Dropdown cho Danh m·ª•c
                    DropdownButtonFormField<String>(
                      value: tempTransaction.category,
                      decoration: const InputDecoration(labelText: 'Danh m·ª•c'),
                      items: categories.map((String category) {
                        return DropdownMenuItem<String>(
                          value: category,
                          child: Text(category),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        if (newValue != null) {
                          setState(() {
                            tempTransaction.category = newValue;
                          });
                        }
                      },
                    ),
                    const SizedBox(height: 10),
                    TextField(
                      controller: amountController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(labelText: 'S·ªë ti·ªÅn'),
                    ),
                    const SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text('Ng√†y: ${DateFormat('dd/MM/yyyy').format(tempTransaction.date)}'),
                        TextButton(
                          onPressed: () async {
                            final DateTime? picked = await showDatePicker(
                              context: context,
                              initialDate: tempTransaction.date,
                              firstDate: DateTime(2000),
                              lastDate: DateTime(2101),
                            );
                            if (picked != null && picked != tempTransaction.date) {
                              setState(() {
                                tempTransaction.date = picked;
                              });
                            }
                          },
                          child: const Text('Ch·ªçn ng√†y'),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('H·ªßy'),
                ),
                ElevatedButton(
                  onPressed: () {
                    // X·ª≠ l√Ω v√† ki·ªÉm tra d·ªØ li·ªáu
                    final newAmount = double.tryParse(amountController.text.replaceAll(',', ''));
                    if (nameController.text.isEmpty || newAmount == null || newAmount <= 0) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß v√† ƒë√∫ng ƒë·ªãnh d·∫°ng.')),
                      );
                      return;
                    }

                    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c√≤n l·∫°i trong tempTransaction
                    tempTransaction.name = nameController.text;
                    tempTransaction.amount = newAmount;

                    // G·ª≠i object ƒë√£ ch·ªânh s·ª≠a v√† object g·ªëc
                    onEdit(transaction, tempTransaction);
                    Navigator.of(context).pop();
                  },
                  child: const Text('L∆∞u'),
                ),
              ],
            );
          },
        );
      },
    );
  }


  @override
  Widget build(BuildContext context) {
    // ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn
    final amountFormatter = NumberFormat.currency(
      locale: 'vi_VN',
      symbol: ' VNƒê',
      decimalDigits: 0,
    );
    final formattedAmount = amountFormatter.format(transaction.amount);
    final dateFormatter = DateFormat('dd/MM/yyyy');
    final formattedDate = dateFormatter.format(transaction.date);

    final bool isIncome = transaction.type == TransactionType.income;
    final Color amountColor =
    isIncome ? Colors.green.shade700 : Colors.red.shade700;
    final IconData iconData = isIncome ? Icons.arrow_upward : Icons.arrow_downward;
    final Color iconColor = isIncome ? Colors.green.shade100 : Colors.red.shade100;

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
      elevation: 2,
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: iconColor,
          child: Icon(iconData, color: amountColor, size: 20),
        ),
        title: Text(
          transaction.name, // T√™n thu chi
          style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 4),
            Text('Danh m·ª•c: ${transaction.category}'), // Danh m·ª•c
            Text('Ng√†y: $formattedDate'), // Th√°ng, ng√†y, nƒÉm
            // HI·ªÜN R√ï S·ªê TI·ªÄN V√Ä LO·∫†I GIAO D·ªäCH
            Text(
              'S·ªë ti·ªÅn: ${isIncome ? '+' : '-'}$formattedAmount',
              style: TextStyle(
                color: amountColor,
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
            Text('Lo·∫°i giao d·ªãch: ${isIncome ? 'Thu nh·∫≠p' : 'Chi ti√™u'}',
                style: TextStyle(fontSize: 12, color: Colors.grey.shade600)),
          ],
        ),
        trailing: PopupMenuButton<String>(
          onSelected: (String result) {
            if (result == 'edit') {
              _showEditDialog(context);
            } else if (result == 'delete') {
              // G·ªçi h√†m x√≥a v√† truy·ªÅn object giao d·ªãch c·∫ßn x√≥a
              onDelete(transaction);
            }
          },
          itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
            const PopupMenuItem<String>(
              value: 'edit',
              child: Row(
                children: [
                  Icon(Icons.edit, size: 20, color: Colors.blue),
                  SizedBox(width: 8),
                  Text('Ch·ªânh s·ª≠a'),
                ],
              ),
            ),
            const PopupMenuItem<String>(
              value: 'delete',
              child: Row(
                children: [
                  Icon(Icons.delete, size: 20, color: Colors.red),
                  SizedBox(width: 8),
                  Text('X√≥a'),
                ],
              ),
            ),
          ],
          icon: const Icon(Icons.more_vert), // N√∫t ba ch·∫•m d·ªçc
        ),
      ),
    );
  }
}